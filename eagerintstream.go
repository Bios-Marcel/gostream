// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package gostream

type eagerIntStream struct {
	data []int
}

//StreamIntEager creates an eager IntStream that uses a copy of the passed
//array.
func StreamIntEager(data []int) IntStream {
	defensiveCopy := make([]int, len(data))
	copy(defensiveCopy, data)
	return &eagerIntStream{
		data: defensiveCopy,
	}
}

func (stream *eagerIntStream) Filter(filterFunction func(value int) bool) IntStream {
	newData := make([]int, 0)
	for _, element := range stream.data {
		if filterFunction(element) {
			newData = append(newData, element)
		}
	}
	stream.data = newData

	return stream
}

func (stream *eagerIntStream) Map(mapFunction func(value int) int) IntStream {
	for index, element := range stream.data {
		stream.data[index] = mapFunction(element)
	}

	return stream
}

func (stream *eagerIntStream) FindFirst() *int {
	if len(stream.data) > 0 {
		return &stream.data[0]
	}

	return nil
}

func (stream *eagerIntStream) Collect() []int {
	return stream.data
}

func (stream *eagerIntStream) Reduce(reduceFunction func(valueOne, valueTwo int) int) *int {
	return reduceInt(reduceFunction, stream.data)
}
